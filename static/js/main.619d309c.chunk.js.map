{"version":3,"sources":["Register.js","Online.js","ChatScreen.js","ToUser.js","ChatBox.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","marginRight","flex","iconButton","divider","height","margin","windowDimensions","setUser","useState","err","setErr","classes","userName","useRef","Container","maxWidth","style","position","top","Paper","component","className","InputBase","error","inputRef","placeholder","inputProps","Divider","orientation","IconButton","color","aria-label","onClick","current","value","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","title","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","justifyContent","content","contentShift","Online","user","isOpen","addTo","online","unread","setUnread","useTheme","React","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","Typography","variant","noWrap","edge","Badge","invisible","Drawer","anchor","paper","direction","List","map","e","ListItem","button","toUser","key","anchorOrigin","horizontal","vertical","overlap","ListItemText","primary","float","card","minWidth","bullet","transform","fontSize","pos","marginBottom","ChatScreen","to","send","from","multiline","message","sendMessage","split","forEach","msg","defaultValue","onKeyPress","shiftKey","preventDefault","addEnterEvt","ToUser","align","chatStore","ChatBox","connection","updateOnline","onlineOpen","setOnlineOpen","tos","setTos","addToChat","JSON","stringify","side","displayMsg","document","getElementById","innerHTML","onmessage","incoming","parse","data","userIndex","findIndex","unreadMessages","push","onlineBar","existing","onlineUsers","Object","assign","storeIndex","f","splice","add","indexOf","toArr","setTimeout","Box","bgcolor","p","my","id","marginTop","connected","currentUser","Chat","setOnlineUsers","wsOnmsg","existingUsers","reg","window","WebSocket","MozWebSocket","onopen","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.619d309c.chunk.js","sourcesContent":["import React , { useRef, useState } from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport windowDimensions from 'react-window-dimensions';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      padding: '2px 4px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      width: 400,\r\n    },\r\n    input: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      flex: 1,\r\n    },\r\n    iconButton: {\r\n      padding: 10,\r\n    },\r\n    divider: {\r\n      height: 28,\r\n      margin: 4,\r\n    },\r\n  })); \r\n\r\nconst Register = ({width,height,setUser})=>{\r\n    const [err,setErr] = useState(true);\r\n    const classes = useStyles();\r\n    const userName = useRef();\r\n    const handleRegister = ()=>{\r\n        if(userName.current.value){\r\n            setUser(userName.current.value);\r\n        }else{\r\n            setErr(true);\r\n        }    \r\n    }\r\n        return (\r\n            <>\r\n                <Container maxWidth='sm'>\r\n                <div style={{position:'relative',top:`${height/3}px`}}>\r\n                <Paper component=\"form\" className={classes.root}>\r\n                    <InputBase\r\n                        error={err}                        \r\n                        inputRef={userName}\r\n                        className={classes.input}\r\n                        placeholder=\"Enter User Name\"\r\n                        inputProps={{ 'aria-label': 'enter user name' }}\r\n                    />\r\n                    <Divider className={classes.divider} orientation=\"vertical\" />\r\n                    <IconButton color=\"primary\" className={classes.iconButton} aria-label=\"continue\" onClick={handleRegister}>\r\n                    <ArrowForwardIcon />\r\n                    </IconButton>\r\n                </Paper>\r\n                </div>\r\n                </Container>\r\n            </>\r\n        )\r\n}\r\n\r\nexport default windowDimensions()(Register);","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport TrafficIcon from '@material-ui/icons/Traffic';\r\nimport Badge from '@material-ui/core/Badge';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: 0,\r\n  },\r\n}));\r\n\r\nconst Online = ({user,isOpen,addTo,online}) => {\r\n  const[unread,setUnread] = useState(false);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    isOpen(true);\r\n    setUnread(false);\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    isOpen(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  const connectToUser = (toUser) => {\r\n    addTo(toUser);\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap className={classes.title}>\r\n            {user}             \r\n          </Typography>\r\n\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"end\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(open && classes.hide)}\r\n          >\r\n            <Badge invisible={!unread} color=\"secondary\" variant=\"dot\">\r\n              <TrafficIcon />\r\n            </Badge>\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n        \r\n      </main>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"right\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {online.map((e) => (\r\n            <ListItem button onClick={()=>connectToUser(e.user)} key={e.user}>\r\n            <Badge invisible={!e.unread} color=\"secondary\" variant=\"dot\" anchorOrigin={{horizontal:'left',vertical:'top'}} overlap='rectangle'></Badge>\r\n            <ListItemText style={{marginLeft:'10px'}} primary={e.user} />\r\n          </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Online;\r\n","import React, { useRef } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n        width: '90%',\r\n        float: 'left'\r\n    },\r\n    divider: {\r\n        height: 28,\r\n        margin: 4,\r\n      },\r\n    card: {\r\n      minWidth: 275,\r\n      margin: 1,\r\n      padding: '2px 4px',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n    },\r\n    bullet: {\r\n      display: 'inline-block',\r\n      margin: '0 2px',\r\n      transform: 'scale(0.8)',\r\n    },\r\n    title: {\r\n      fontSize: 14,\r\n    },\r\n    pos: {\r\n      marginBottom: 12,\r\n    },\r\n  }));\r\n\r\n\r\nconst ChatScreen = ({to,from,send})=>{\r\n    let multiline = false;\r\n    const message = useRef();\r\n    const classes = useStyles();\r\n\r\n    const sendMessage = ()=>{\r\n        if(message.current.value){\r\n            if(multiline){\r\n                let multiMsg = message.current.value.split('\\n');\r\n                multiMsg.forEach((msg)=>{\r\n                    send(msg,to);\r\n                });\r\n            }else{\r\n                send(message.current.value,to);\r\n            }\r\n            multiline = false;\r\n            message.current.value = null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const addEnterEvt = (e)=>{\r\n        if(e.key === \"Enter\" && !e.shiftKey){\r\n            e.preventDefault();\r\n            sendMessage();\r\n        }\r\n        if(e.key === \"Enter\" && e.shiftKey){\r\n            multiline = true;\r\n        }\r\n    }\r\n\r\n    return ( \r\n            <Paper component=\"form\" className={classes.card}>\r\n            <InputBase\r\n                        className={classes.margin}\r\n                        defaultValue=\"\"\r\n                        inputRef={message}\r\n                        multiline={true}\r\n                        placeholder=\"Type your message\"\r\n                        inputProps={{ 'aria-label': 'naked' }}\r\n                        onKeyPress={(e)=>addEnterEvt(e)}\r\n                    />   \r\n            <Divider className={classes.divider} orientation=\"vertical\" />\r\n            <IconButton onClick={sendMessage}>\r\n                <SendIcon />\r\n            </IconButton>\r\n        </Paper>  \r\n    )\r\n}\r\n\r\nexport default ChatScreen;","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n/*  */\r\n\r\nconst ToUser = ({to})=>{\r\n    \r\n    return (\r\n            <Typography align='left' color='primary' component={'div'}>\r\n                    {to}\r\n            </Typography>\r\n    );\r\n}\r\n\r\nexport default ToUser;","import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Online from './Online';\r\nimport ChatScreen from './ChatScreen';\r\nimport ToUser from './ToUser';\r\nimport Box from '@material-ui/core/Box';\r\nimport Divider from '@material-ui/core/Divider';\r\n  \r\nlet chatStore = [];\r\n\r\nconst ChatBox = ({user,online,connection,updateOnline})=>{\r\n\r\n    const [onlineOpen,setOnlineOpen] = useState(false);\r\n\r\n    const [tos,setTos] = useState([]);\r\n\r\n    const useStyles = makeStyles(theme => ({\r\n        root: {\r\n          flexGrow: 1,\r\n          margin: 20\r\n        },\r\n          input: {\r\n            marginLeft: theme.spacing(1),\r\n            flex: 1,\r\n          },\r\n          iconButton: {\r\n            padding: 10,\r\n          },\r\n          divider: {\r\n            height: 28,\r\n            margin: 4,\r\n          }\r\n      }));\r\n\r\n    const classes = useStyles();\r\n\r\n    const addTo = (add)=>{\r\n      if(tos.indexOf(add)<0){\r\n        let toArr = [];\r\n        Object.assign(toArr,tos);\r\n        toArr.push(add);\r\n        setTos(toArr);\r\n        setTimeout(()=>{\r\n          let userIndex = chatStore.findIndex((e)=>(e.user === add));\r\n          if(userIndex >= 0){\r\n            chatStore[userIndex].unreadMessages.forEach((msg)=>(\r\n              addToChat(msg,chatStore[userIndex].user,'left')\r\n            ));\r\n            let onlineUsers = [];\r\n            Object.assign(onlineUsers,online);\r\n            onlineUsers[userIndex].unread = false;\r\n            onlineUsers[userIndex].unreadMessages = [];\r\n            updateOnline(onlineUsers);\r\n            chatStore.splice(userIndex,1);\r\n          }\r\n        },1000);\r\n      }\r\n    }\r\n\r\n    const sendMessage = (message,to)=>{\r\n      addToChat(message,to,'right');\r\n      connection.send(JSON.stringify({from:user,to:to,message:message}));\r\n    }\r\n\r\n    const addToChat = (message,from,side)=>{\r\n        let bgColor = (side==='right')?'white':'#b3ecff';  \r\n        let style = `background-color:${bgColor};border-radius:4px;text-align:left;width:auto;max-width:80%;word-wrap:normal;float:${side};`;\r\n        let displayMsg = `<div style=${style}><span style='margin-left:5px;margin-right:5px'>${message}</span></div><br/>`;\r\n        document.getElementById(from).innerHTML += displayMsg;\r\n    }\r\n\r\n    connection.onmessage = (message)=>{\r\n      let incoming = JSON.parse(message.data);\r\n      if(incoming.message){\r\n        if(document.getElementById(incoming.from)){\r\n          addToChat(incoming.message,incoming.from,'left');\r\n        }else{\r\n          let userIndex = chatStore.findIndex(e=>(e.user === incoming.from));\r\n          if(userIndex >= 0){\r\n            chatStore[userIndex].unread = true;\r\n            chatStore[userIndex].unreadMessages.push(incoming.message);\r\n          }else{\r\n            chatStore.push({user:incoming.from,unread:true,unreadMessages:[incoming.message]});\r\n          }\r\n          if(onlineOpen){\r\n            onlineBar(onlineOpen);\r\n          }\r\n        }\r\n      }\r\n      if(incoming.error){\r\n        addToChat(`<i>${incoming.error}</i>`,incoming.to,'left');\r\n      }\r\n      if(incoming.existing){\r\n        let current = [];\r\n        incoming.existing.forEach(e=>{\r\n            if(e!==user){\r\n              current.push({user:e})\r\n            }\r\n        });\r\n        updateOnline(current);\r\n      }\r\n    }\r\n\r\n    const onlineBar = (isOpen)=>{\r\n      let onlineUsers = [];\r\n      Object.assign(onlineUsers,online);\r\n      online.forEach((e)=>{\r\n        let storeIndex = chatStore.findIndex((f)=>(f.user === e.user));\r\n        if(storeIndex >= 0){\r\n          onlineUsers.splice(storeIndex,1);\r\n        }\r\n      });\r\n      onlineUsers.push(...chatStore);\r\n      updateOnline(onlineUsers);\r\n      setOnlineOpen(isOpen);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n          <Online user={user} isOpen={onlineBar} addTo={(add)=>addTo(add)} online={online} />\r\n          {\r\n            tos.map((to)=>(\r\n              <Box key={to} width={onlineOpen?\"80%\":\"100%\"} bgcolor=\"grey.300\" p={1} my={0.5} >\r\n                <div>\r\n                  <ToUser to={to} />\r\n                  <Divider/>\r\n                  <div id={to}></div>\r\n                  <div style={{marginTop:'20px'}} >\r\n                      <ChatScreen to={to} from={user} send={sendMessage} ></ChatScreen>\r\n                  </div>\r\n                </div>\r\n              </Box>\r\n              \r\n            ))\r\n          } \r\n        </div>\r\n    );  \r\n}\r\n\r\nexport default ChatBox;\r\n\r\n","import React, { useState } from 'react';\r\nimport Register from './Register';\r\nimport ChatBox from './ChatBox';\r\n\r\nlet connected = false;\r\nlet connection = null;\r\nlet currentUser = null;\r\nfunction Chat(){\r\n    const [onlineUsers, setOnlineUsers] = useState([]);\r\n    const changeLayout = (reg)=>{\r\n        window.WebSocket = window.WebSocket || window.MozWebSocket;\r\n        connection = new WebSocket('wss://chatsocketbe.herokuapp.com/?from='+reg);\r\n        connection.onopen = (open)=>{\r\n            connected = true;\r\n            currentUser = reg;\r\n        }     \r\n        connection.onmessage = wsOnmsg;\r\n    }\r\n    const wsOnmsg = (message)=>{\r\n        var incoming = JSON.parse(message.data);\r\n        if(!incoming.error){\r\n            if(incoming.existing){\r\n                let current = [];\r\n                incoming.existing.forEach(e=>{\r\n                    if(e!==currentUser){\r\n                      current.push({user:e})\r\n                    }\r\n                });\r\n                existingUsers(current);\r\n            }\r\n        }\r\n    }\r\n\r\n    const existingUsers = (online)=>{\r\n        setOnlineUsers(online);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {connected && <ChatBox user={currentUser} online={onlineUsers} connection={connection} updateOnline={existingUsers} />}\r\n        {!connected && <Register setUser={changeLayout} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport Chat from './Chat';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Chat/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}